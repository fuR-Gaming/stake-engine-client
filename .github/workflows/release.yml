name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.1)'
        required: true
        type: string

permissions:
  contents: read
  id-token: write

jobs:
  validate-release:
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      should-publish: ${{ steps.check-version.outputs.should-publish }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Get version from input or tag
      id: get-version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          echo "Using manual version: $VERSION"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Using tag version: $VERSION"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Validate version format
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "Error: Invalid version format: $VERSION"
          echo "Expected format: X.Y.Z or X.Y.Z-suffix"
          exit 1
        fi
    
    - name: Check if version exists on npm
      id: check-version
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        if npm view stake-engine-client@$VERSION version 2>/dev/null; then
          echo "Version $VERSION already exists on npm"
          echo "should-publish=false" >> $GITHUB_OUTPUT
        else
          echo "Version $VERSION does not exist, proceeding with publish"
          echo "should-publish=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: |
        npm run build
        npm test --if-present
    
    - name: Verify package.json version
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        RELEASE_VERSION="${{ steps.get-version.outputs.version }}"
        if [ "$PACKAGE_VERSION" != "$RELEASE_VERSION" ]; then
          echo "Warning: package.json version ($PACKAGE_VERSION) differs from release version ($RELEASE_VERSION)"
          echo "Updating package.json version to match release"
          npm version $RELEASE_VERSION --no-git-tag-version
        fi

  publish-npm:
    runs-on: ubuntu-latest
    needs: validate-release
    if: needs.validate-release.outputs.should-publish == 'true'
    
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Configure npm authentication
      run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
    
    - name: Update package.json version
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        npm version $VERSION --no-git-tag-version
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build package
      run: npm run build
    
    - name: Run final tests
      run: npm test --if-present
    
    - name: Verify package contents
      run: |
        npm pack --dry-run
        echo "Package contents verified"
    
    - name: Publish to npm
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        if [[ "$VERSION" =~ -[a-zA-Z] ]]; then
          echo "Publishing pre-release version with --tag beta"
          npm publish --tag beta
        else
          echo "Publishing stable release"
          npm publish
        fi
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Verify published package
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        sleep 10  # Wait for npm registry to update
        PUBLISHED_VERSION=$(npm view stake-engine-client@$VERSION version)
        if [ "$PUBLISHED_VERSION" = "$VERSION" ]; then
          echo "✅ Package successfully published to npm"
        else
          echo "❌ Package publish verification failed"
          exit 1
        fi

  create-github-release:
    runs-on: ubuntu-latest
    needs: [validate-release, publish-npm]
    if: needs.validate-release.outputs.should-publish == 'true' && github.event_name == 'push'
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        echo "Generating changelog for v$VERSION"
        
        # Get previous tag
        PREV_TAG=$(git tag --sort=-version:refname | grep -v "v$VERSION" | head -1)
        
        if [ -n "$PREV_TAG" ]; then
          echo "Comparing v$VERSION with $PREV_TAG"
          CHANGELOG=$(git log $PREV_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
        else
          echo "No previous tag found, using all commits"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        fi
        
        # Save changelog to file
        echo "## Changes" > changelog.md
        echo "$CHANGELOG" >> changelog.md
        
        # Output for GitHub release
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat changelog.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.validate-release.outputs.version }}
        release_name: Release v${{ needs.validate-release.outputs.version }}
        body: |
          # Stake Engine Client v${{ needs.validate-release.outputs.version }}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Installation
          
          ```bash
          npm install stake-engine-client@${{ needs.validate-release.outputs.version }}
          ```
          
          ## npm Package
          
          📦 [View on npm](https://www.npmjs.com/package/stake-engine-client/v/${{ needs.validate-release.outputs.version }})
        draft: false
        prerelease: ${{ contains(needs.validate-release.outputs.version, '-') }}

  notify-success:
    runs-on: ubuntu-latest
    needs: [validate-release, publish-npm, create-github-release]
    if: always() && needs.validate-release.outputs.should-publish == 'true'
    
    steps:
    - name: Notify release status
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        if [ "${{ needs.publish-npm.result }}" = "success" ]; then
          echo "🎉 Successfully published stake-engine-client@$VERSION to npm!"
          echo "📦 Package: https://www.npmjs.com/package/stake-engine-client/v/$VERSION"
        else
          echo "❌ Failed to publish stake-engine-client@$VERSION"
          exit 1
        fi